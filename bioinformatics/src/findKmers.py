import unittest
import operator
from bioinformatics.src.hamming_distance import is_distance_not_greater_than
from bioinformatics.src.hamming_distance import distanceNeighborhood


def findClumps(
        array,
        k_kmer_size,
        L_WindowSize,
        t_requiredFrequency,
        startIndex = 0,
        endIndex = None):

    kmers_dict = findKmersBySize(array, k_kmer_size, startIndex, endIndex)
    clumps = {}
    for kmer in kmers_dict:
        indicesList = kmers_dict[kmer]
        listOfCLumpIndices = findClumpsIndices(indicesList, k_kmer_size, L_WindowSize, t_requiredFrequency)
        if len(listOfCLumpIndices) > 0:
            clumps[kmer] = listOfCLumpIndices
    return clumps



def findClumpsIndices(
        indicesList,
        k_kmerSize,
        L_windowSize,
        t_requiredFrequency):

    listOfCLumpIndices = []
    totalIndicex = len(indicesList)
    for i in range(totalIndicex):
        kmerIndex = indicesList[i]
        last_possible_index_in_window = kmerIndex + L_windowSize - k_kmerSize
        possibles = []
        possibles.append(kmerIndex)
        for j in range(i+1, totalIndicex):
            kmerIndex = indicesList[j]
            if kmerIndex <= last_possible_index_in_window:
                possibles.append(kmerIndex)
            else:
                break
        if len(possibles) >= t_requiredFrequency:
            listOfCLumpIndices.append(possibles)
    return listOfCLumpIndices


def findMaxNumberOfKmers(
        textArray,
        kmer_size,
        start_index=0,
        end_index=None):

    kmer_dict = findKmersBySize(textArray, kmer_size, start_index, end_index)

    current_max_number = 0
    kmer_set = {'dummy'}  # without the 'dummy' value it makes it a dictionary.

    for kmer in kmer_dict:
        numberOfIndexes = len(kmer_dict.get(kmer))
        if numberOfIndexes == current_max_number:
            kmer_set.add(kmer)
        elif numberOfIndexes > current_max_number:
            current_max_number = numberOfIndexes
            kmer_set.clear()
            kmer_set.add(kmer)

    return kmer_set


def findMostIndices(dictionary):
    current_max_number = 0
    kmer_set = {'dummy'}  # without the 'dummy' value it makes it a dictionary.

    for kmer in dictionary:
        numberOfIndexes = len(dictionary.get(kmer))
        if numberOfIndexes == current_max_number:
            kmer_set.add(kmer)
        elif numberOfIndexes > current_max_number:
            current_max_number = numberOfIndexes
            kmer_set.clear()
            kmer_set.add(kmer)

    return kmer_set


def findKmersBySizeWithHammingDistance(
        textArray,
        kmer_size,
        max_distance=0,
        start_index=0,
        end_index=None):

    kmer_dict = dict()

    if end_index:
        end = end_index - kmer_size + 1
    else:
        end = len(textArray) - kmer_size + 1

    for i in range(start_index, end):
        current_kmer = textArray[i: i+kmer_size]
        indices = kmer_dict.get(current_kmer)
        if indices:
            indices.append(i)
        else:
            indices_2 = []
            indices_2.append(i)
            kmer_dict[current_kmer] = indices_2

            j=0
            for kmer in kmer_dict:
                if kmer != current_kmer:
                    if is_distance_not_greater_than(current_kmer, kmer, max_distance):
                        indices = kmer_dict[kmer]
                        indices.append(i)
                        indices_2.append(j)
                j+=1
    return kmer_dict

def findKmersBySizeWithHammingDistance_2(
        textArray,
        kmer_size,
        max_distance=0,
        start_index=0,
        end_index=None):
    kmers = findKmersBySize(textArray, kmer_size, start_index, end_index)

    if end_index:
        end = end_index - kmer_size + 1
    else:
        end = len(textArray) - kmer_size + 1

    for i in range(start_index, end):
        current_kmer = textArray[i: i+kmer_size]
        indices = kmers.get(current_kmer)
        if not indices:
            for kmer in kmers:
                if is_distance_not_greater_than(current_kmer, kmer, max_distance):
                    indices = kmers.get[kmer]
                    indices.append(i)
    return kmers



def findKmersBySizeWithHammingDistanceCounts(
        textArray,
        kmer_size,
        max_distance=0,
        start_index=0,
        end_index=None):

    kmer_dict = dict()

    if end_index:
        end = end_index - kmer_size + 1
    else:
        end = len(textArray) - kmer_size + 1

    for i in range(start_index, end):
        current_kmer = textArray[i: i+kmer_size]
        indices = kmer_dict.get(current_kmer)
        if indices:
            indices.append(i)
        else:
            indices_2 = []
            indices_2.append(i)
            kmer_dict[current_kmer] = indices_2

            j=0
            for kmer in kmer_dict:

                if kmer == current_kmer:
                    j +=1
                    continue
                if is_distance_not_greater_than(current_kmer, kmer, max_distance):
                    indices = kmer_dict[kmer]
                    indices.append(i)

                    indices_2.append(j)
                    i+=1
    return kmer_dict


def findKmersBySize(
        textArray,
        kmer_size,
        start_index=0,
        end_index=None):

    kmer_dict = dict()

    if end_index:
        end = end_index - kmer_size + 1
    else:
        end = len(textArray) - kmer_size + 1

    for i in range(start_index, end):
        current_kmer = textArray[i: i+kmer_size]
        indexes = kmer_dict.get(current_kmer)
        if indexes:
            indexes.append(i)
        else:
            indexes = []
            indexes.append(i)
            kmer_dict[current_kmer] = indexes

    return kmer_dict


def findIndexesForKmerWithHammingDistance(
        textArray,
        kmerPattern,
        max_hamming_distance=0,
        start_index=0,
        end_index=None):

    indexes = []

    if end_index:
        end = end_index - len(kmerPattern) + 1
    else:
        end = len(textArray) - len(kmerPattern) + 1

    for i in range(start_index, end):
        hamming_distance = 0
        for j in range(len(kmerPattern)):
            if kmerPattern[j] != textArray[i + j]:
                hamming_distance += 1
                if hamming_distance > max_hamming_distance:
                    break
        if hamming_distance <= max_hamming_distance:
            indexes.append(i)

    return indexes


def findIndexesForKmer(
        textArray,
        kmerPattern,
        start_index=0,
        end_index=None):

    indexes = []

    if end_index:
        end = end_index - len(kmerPattern) + 1
    else:
        end = len(textArray) - len(kmerPattern) + 1


    for i in range(start_index, end):
        matched = True
        for  j in range(len(kmerPattern)):
            if kmerPattern[j] != textArray[i + j]:
                matched = False
                break
        if matched:
            indexes.append(i)

    return indexes


def getReverseComplement(pattern):
    size = len(pattern)
    reverse = ""
    for i in range(size):
        complement = getComplement(pattern[size - i - 1])
        reverse += complement
    return reverse

def areReverseComplements(array1, array2):
    if len(array1) != len(array2):
        return False
    size = len(array1)
    for i in range(size):
        c = array1[i]
        complement = getComplement(c)
        if array2[size-i-1] != complement:
            return False



def getComplement(char):
    if char == "A":
        return "T"
    if char == "T":
        return "A"
    if char == "C":
        return "G"
    if char == "G":
        return "C"
    raise Exception(f"Illegal char: {char}")


def getKmersBySize(
        textArray,
        kmer_size,
        start_index=0,
        end_index=None):

    kmer_dict = dict()

    if end_index:
        end = end_index - kmer_size + 1
    else:
        end = len(textArray) - kmer_size + 1

    kmers = []
    for i in range(start_index, end):
        kmers.append(textArray[i: i+kmer_size])

    for kmer in kmers:
        print(f"     "  , end ="")
        print(f"{kmer}"  , end ="")
    print(f"")
    for kmer in kmers:
        print(f"{kmer}")


def frequentWordsWithMismatches(
        textArray,
        kmer_size,
        distance,
        start_index=0,
        end_index=None):

    if end_index:
        end = end_index - kmer_size + 1
    else:
        end = len(textArray) - kmer_size + 1

    kmers = dict()
    for i in range(start_index, end):
        kmer = textArray[i: i+kmer_size]

        neighborhood = distanceNeighborhood(kmer, distance)

        for neighbor in neighborhood:
            # if neighbor == 'GCGCACACAC':
            #     print('GCGCACACAC')
            if neighbor == 'GCACACACAC':
                print('GCACACACAC')
            count = kmers.get(neighbor)
            if count :
                kmers[neighbor] = count + 1
            else:
                kmers[neighbor] =  1

            GCACACAGAC_count = kmers.get('GCACACACAC')
            print(GCACACAGAC_count)
    count_max_key = kmers['GCACACACAC']
    print(f"GCACACACAC: {kmers['GCACACACAC']}")
    print(f"GCGCACACAC: {kmers['GCGCACACAC']}")
    max_set = {"dummy"}

    max_key = max(kmers.items(), key=operator.itemgetter(1))[0]


    max_count=0

    GCACACAGAC_count = kmers.get('GCACACACAC')
    for kmer in kmers:
        if kmer=='GCACACACAC':
            GCACACAGAC_count_2 = kmers.get('GCACACACAC')
        count = kmers[kmer]
        if count > max_count:
            max_count = count
            max_set.clear()
            max_set.add(kmer)
        elif count == max_count:
            max_set.add(kmer)

    return max_set, kmers









def getDistancedKmers(
        textArray,
        kmer_size,
        max_distance,
        start_index=0,
        end_index=None):
    kmer_dict = dict()

    if end_index:
        end = end_index - kmer_size + 1
    else:
        end = len(textArray) - kmer_size + 1

    kmers = []
    for i in range(start_index, end):
        kmer = textArray[i: i+kmer_size]
        kmers.append(kmer)

    for i in range(len(kmers)):
        kmer = kmers[i]
        kmer_dict[kmer]=[]
        kmer_dict[kmer].append(i)
        for j in range (len(kmers)):
            if i!= j:
                toMatchKmer = kmers[j]
                if is_distance_not_greater_than(kmer, toMatchKmer, max_distance):
                    kmer_dict[kmer].append(j)
    return kmer_dict




class TestStringMethods(unittest.TestCase):

    def test_find_number_of_kmer_indexes_1(self):
        indexes = findIndexesForKmer("GCGCG", "GCG")
        self.assertEqual(len(indexes), 2)

    def test_find_number_of_kmer_indexes_1(self):
        indexes = findIndexesForKmer("AGCCGGGATCTAGGGATCTGGGATCTGAAGGGATCTGGGGATCTAGTGGGATCTGGGATCTACGAAGGGGATCTGGGGATCTGGGATCTGGGGATCTGGGATCTTGGGATCTCTGGGATCTAATTGGGATCTTCGGAGGGGATCTGGGATCTGGGATCTCCTGGGGATCTGGGATCTGAGTCAGGGATCTGGGATCTGGGGGATCTGTGGGATCTGTCTCAGGGATCTGGGGATCTTCTCGGGATCTACGGGATCTTGGGATCTAGGGATCTGAATATTTGGGATCTTGGGATCTCCAGGGATCTCTGGGATCTGGGGATCTTACCGGGATCTGTGCATAAGGGGATCTGAAGGGATCTAGGGATCTCCAGGGATCTGGGATCTCAGGGATCTTGGGATCTAGGGATCTTGGGATCTATTAGGGATCTCTTAGGGATCTTGGGATCTTGCCCCCGGGATCTGAGACGGGATCTCGGGATCTGGGATCTTGGGATCTGGGATCTAGGGATCTGTATTGGGATCTAAAGGGATCTGGGATCTATGGGATCTCCTTCAGTATGGGGATCTTGTGGGATCTGCTGTAGAGGTCGGGATCTGGGATCTCGGGATCTGGGATCTCGGGGATCTAGGGATCTAAGTAGGGATCTTTGGGGATCTCATTAGGGATCTTGGGATCTGGGATCTGGGATCTTGCGGGGATCTGGGATCTCGGGGATCTTCTCCAAAGGGATCTAGGGATCTAACAGGGATCTCCACGGGATCTCGGGATCTCAGCAACTGGGATCTGAAGGGATCTGGGGATCTCCATGGGATCTGGGATCTTGGGATCTTGACATAGGGATCTCGGGATCTGGGGATCTGTGGGATCTGAGGGATCTGGGGATCTAAGGCGTCTGGGATCTTGGGATCTAATGCCGTGGGGATCTAATGCGGGATCT",
                                     "GGGATCTGG")
        self.assertEqual(len(indexes), 27)

    def test_find_kmer_by_size_1(self):
        kmers = findMaxNumberOfKmers("ACGTTGCATGTCGCATGATGCATGAGAGCT",
                                     4)
        self.assertCountEqual(kmers, {'CATG', 'GCAT'})

    def test_find_kmer_by_size_2(self):
        kmers = findMaxNumberOfKmers("CACCGATTCACCGATTCGATTAATCCGAACTGGGCAGCCAGACAGCCAGACGAACTGGGCGATTAATCCACCGATTCAGCCAGACACCGATTCGAACCCTCACCGATTCACCGATTCAGCCAGACGATTAATCCGATTAATCCACCGATTCGAACCCTCGAACTGGGCGAACTGGGCGATTAATCCAGCCAGACGAACTGGGCGAACTGGGCGAACCCTCGATTAATCCGATTAATCCGATTAATCCACCGATTCACCGATTCGAACTGGGCGATTAATCCGAACCCTCGAACCCTCAGCCAGACGATTAATCCAGCCAGACAGCCAGACGATTAATCCGATTAATCCGATTAATCCAGCCAGACAGCCAGACGAACCCTCGATTAATCCACCGATTCACCGATTCAGCCAGACGAACCCTCGAACCCTCACCGATTCGAACTGGGCACCGATTCAGCCAGACGAACTGGGCACCGATTCGAACTGGGCACCGATTCACCGATTCACCGATTCGAACTGGGCACCGATTCGAACCCTCACCGATTCGATTAATCCGAACTGGGCGAACTGGGCGAACCCTCAGCCAGACGAACTGGGCACCGATTCGAACCCTCAGCCAGACGAACTGGGCGAACTGGGCGATTAATCCAGCCAGACACCGATTCACCGATTCACCGATTCAGCCAGACACCGATTCACCGATTCGAACTGGGCACCGATTCGAACCCTCGATTAATCCACCGATTCGATTAATCCACCGATTCAGCCAGACACCGATTCAGCCAGACAGCCAGACAGCCAGACGAACCCTCGAACTGGGCACCGATTCGATTAATCCGATTAATC",
                                     14)
        self.assertCountEqual(kmers, {'CGATTCACCGATTC', 'CCGATTCACCGATT', 'CACCGATTCACCGA', 'ACCGATTCACCGAT'})

    def test_find_indexes_for_kmer(self):
        indices = findIndexesForKmer("GATATATGCATATACTT", "ATAT" )
        self.assertCountEqual(indices, [1, 3, 9])

    def test_reverse_complements_1(self):
        reverseComplement = getReverseComplement("AAAACCCGGT")
        self.assertEqual(reverseComplement, "ACCGGGTTTT")

    def test_find_clumps(self):
        clumps = findClumps("CGGACTCGACAGATGTGAAGAACGACAATGTGAAGACTCGACACGACAGAGTGAAGAGAAGAGGAAACATTGTAA",
                            5, # kmer_size
                            50, #window_size
                            4) # required frequency
        for kmer in clumps:
            print(f"{kmer}  ", end ="")
        self.assertCountEqual(clumps, ["CGACA", "GAAGA"])

    def test_find_clumps_2(self):
        clumps = findClumps("TTGGCAGGGGTACGTCAGCATGCATATGTGGGGGGGGGCATATGTGGCGTTGGAGTTGCCATGGAGTTGCCGCCCCGGCGTCTCGAGACCATTCTTTTTCTTTTCTTTCCGCTTTCCGCAATGGGTATACTGGTTGTGGCTCTCATCGGTGATTGCGCAGTGTAAGAGGTCCAAGTGGCTGTGTCCCACCACTACACACTACTACCCTACCGCCAGAACCGACAGTATGTCCACGCGGTTAGACAATTAGGCTCATCCTGGGCCGGGTAGGGTAAAATGATGGGGTAAAATGTGCCTCTGAAGATTCACGCTATTTATTGCATGGTACTGACTTAAACTATCGGTGCAGAATTGGCGCGCTCTTATCTGTTCGGGAGATGAGACTAAAACTCTTAGGATTTTTGCCCTTAGTTATACAGTAGACTTGCGAGACTCTGCGGGTGTCCTAGTCGTAGGGTTCGAGTTTATGCTCCTGTCATTGTGTCATGGCTGCTGTCATGGCTTAGAAGTCGCATCACCAAAAGAGATAGATAGATAACGATAACGTCTAGCGACAGTAACCGCTGGCTCCCTCTCATCGCAGGCGCGCCAGGCTCCGAGCGGGTAGGCTGCTAATGAATAAGTACTCAACAGATAAGGATGTTCGCTATCAGATCATATCCCGTCCGTGGCATGTAATTGTAACTCCACAGACAGAGGTCGTTCTAGAGTACTCAAGCATTTCTCCGCATAGGAACGTGTGAGAGACCGGCTTTCAGACAGCGCAAGCGGCTGACGTGAACAGCTTCGCGTCACGATCATCATGCGGCCGATGGGTACGCTTGCAAAGAGGGGATAGCAGCGCCATAACGATTCATAAGGACCCGACCGGCCATTTTGCCAAACAGTCAACAAGTCAACAGTCAACCCCCCAGCGTAAGCTCACAGGTCGCCTGACGAAAGAATAACCAAATAGCGAGATAAATAGCGCCTGAGATACTCAAGGTAAGGGCTGTCTGAAAGTAACACACGCGACTCCCTGGGTCACAACTTCACGCCTCCGACTTCCGACTCCGACTTCCGACTCGCTCCTATCAAAACGCCTACTTGAATCACGAGTAGTACCGGACGGATATGCTGTCACCCACTTCTCTCATGAATGATTGGCCGTCTTTTACCACGACAGCAAGGTTTCCGCTATATGTAACGCCTCGAATCAGGGCGCTCAATGCCATGACAACTTACGCTCTGCCCGAAGGCCCGAAGTTCCCGAAGTTTGATCTCCTTACGCTCCCGTATCTGGGGCATCGGATGGATTGTACATGTCGACTCGTCGACTCGGCTCGGCGATCTACTCCCCTGACGACAGCACGCATATCGGCGCCGCCTCCGGAGTGTCTGCCTACCTTTTCCTTCGGATACCTTGGCCGCTCCCGTGGTGGGCGTCCTTGCGCGTGAAGAAGTGAACGCGTGAACGCGCGCAATCGTGAATATTATTTTTTAACAACGGTCGAGAATGGAACGAGAGTGCGTTCCCTACTCTCTTCACCGTGTTGTGTTTACTAGTTTACTAAATGAGATCTTCGCACCAGAGCTATGGCATGGTTGAATGCACTTGTAACTAAAAAGTACAAGGAGGGATGTTCCCTCCCTCGATCCTCCCCCCATAATGCGGCATGACAATCCCCAAACAATCCCCACAATCCCCATAGCTGAAAAATCAGTGGAGCCCCTAATGTTACACTAAGGAATGCTATTTAATGGACCGCATTACACACATCCCGCACTCAAGGATAGATCTCTCAAGGATAGATAGCGGAGGAAACTAGATTCCCCAGTGAACATTTCTGCTTAGAGAACATTATGGAGAAGGTCAACCCTCGTTCCCCATGAGCCTCCCCTCCCTTCGAAGATGGCGCCCTATCTAAAACACCACAAACGACCAATCGTATCGTTAATCCTAATCATCCTCGTGTCGTATGATAGCCATGTTAAGTATGCATGTTAAGTAGT",
                            10, # kmer_size
                            28, # window_size
                             4) # required frequency
        for kmer in clumps:
            print(f"{kmer}  ", end ="")

        self.assertCountEqual(clumps, [])

    def test_find_clumps_3(self):
        clumps = findClumps("TACCATGCGTCCCTGACGACATCTTATTCAGAGCTTCGGAGCTTAGCGAGAGAGTAGTCGATGAGAGCAGGTATCGGCCCGGCTGAAGCGCAGTTTACGTCCTGTCGTCCTCTCACTCTCACATCAATGGGAGGTGTCTTGAGGTGCGGATTAACAGAGCCTATCAACTCCTCTTTATCACCGGCGTGACCCCCGAGAGCCTGGTAGCGGACCTCCGCCGTCGGCAAAAAATCCGTCGGCAACCCCTCTTATAGGGACCTACGTCAAAAAATCATCCTTTCTTCGTCGGAATAGGGGAGTTGACTGGTGTGCTGATCCAAGGCTCGGGGCAAGGCACAATGGATTTAGTTCACCTAGGAAATATAACCCATAGAAGATACGCAGGCCTTTGTCTGTCTGCTGTAAGGCCGTGTTTACGAGGGCACCAAACGGGATGGTTCGGTTCTAGATTCTCAGTTTCTCCACACCTCCTGACCGTTTTTCAAGCTGCCGACCACTTACTATATCTGCAATCGGGACTTCAGGAGGTGGAGACGAGTCGTGAGATAAACACGACCTGCTGAATTAGACCGCTTTGCGTTCAATAGGTATTTATGGGTCCCTACGAGTGACACCCGGGGTCCCCCCCGTCGGGCGTGTTACCCGTTCTTGCGTGGGCCGCGAGACCTAGAAACTAGAAACTAGAAACCGAAACCACCCATTTGTCGTTACGAAAGCTTTGTTGGACAATGAAAAGCCGTGATTGATCGAACACTTGTACCTCGTCGTATGTACCTCGCCTCGGTAGGGCTCACCCAATGATGTGGGGTCGTTTTAATCGTAGGTTTATTAACCCGTCGTTTTTTAACCCGTGTTTGCAATCGTATACCCCGCACCGGCAGGAGTAGAGTAACGAGTAACGCGTAACGCGTGCCGCGGGCAGAACGAGCTTGTCGCCAATTCGTGTTTAAGACTATTGATAGGAGATGAAGACCCTTAGCTGATACCTCTTGATACCTCTACCTCAATTCGATCCAATCGCGGGTAGCATTGAGTCTATTCTAACAATAGGGTGGCAGAACATTTTCGTTCCTATACATAGCTAAACTCCGACTAATGCTAGTGCCAGAGTGGGCGCGGGCTGTTCAAGCTATTCAGCTATCCTAGGGGGTTAAACTGTTTATTTCTCAAGCGGTGGGTTGGCAACCCGAGAGTCCTGTAGCCGAAGGTGGTGCTGATCTAACATCCGAAACCTAGTCCTCCTACCTAGTCCTAGAAGAAAAGTCTTCCCAAGCACTGCACTGGGGATCACTGGGGAACAGCCTCCCACGTTCGTCTGTTCACACCTGTACACCTGTAGCGGTGAGTGGGCGTTACTGTACGGTAGAGGGTTTTGGAGCAACACGGAGATTACGTAAATATCTATACAGGGAAAAAAATCCTAGAATGAAAAGCCTGGAGACATGGAAGTCCGGGAACAATGCAGAAGGTCATTGAGCTTCCGCCTAGAAGGCACCTCACTCTCATATTGCCTCATATTGTATTGTAGGTCATATGTCTTTTCTCGGAGATGGACACAGGACTTGCTTTCGCGTTCCCCCCGATTCGTAAAGTGATCCGATCGAGCCGAGATAACTCCGAGACATACAGCGCTTATACAATCAACAATCTCAGACACAATCTCAGGTGTAATAATTACGGTCGCAAGCGGCACGGCCTTGACTAACTTAGTTCGGGATTCCTCCATTCATCCGACGATTGGAAGCGCAACCTTTACAAGGACTTCCAGTCCGAGCACCAATCTAAAGTCTCTGTCTAATGGCGTAGGTGGAGGACCCTACCCTACGACCCTACCTACGTCTCTATGTGTGTTTAATGTGAATATCATTCATGAATCGTTTAACTTGCCTAACGTTGGCCGCCCAATGTCGTCTCATGAAAA",
                            9, # kmer_size
                            29, # window_size
                            4) # required frequency

        for kmer in clumps:
            print(f"{kmer}  ", end ="")

        self.assertCountEqual(clumps, [])

    def test_find_kmers_with_hamming_distance(self):
        indexes = findIndexesForKmerWithHammingDistance(
                    "CGCCCGAATCCAGAACGCATTCCCATATTTCGGGACCACTGGCCTCCACGGTACGGACGTCAATCAAAT",
                    "ATTCTGGA",
                    3)

        self.assertCountEqual(indexes, [6, 7, 26, 27])
        i=0

    def test_find_kmers_with_hamming_distance_2(self):
        indices = findIndexesForKmerWithHammingDistance(
            "ATACAAAAGTGCGCTCTATTTACTTTTCAGTCGTGCCTAATTCAACCTAGTCGCTTGACATTGCAGGGAATCGAGAAGCCGGTGTTCTAGCTATTACAGTTTTATCGCCGTGTGTTCACAGTCACTTCTGCCACACCAATGGACTTTTCCGCACATGCCACTACCATCAGTCAACGGGTGTAGCGTGGTTAGTATTCCTACGAACACGTGATGATTGCTCAATTTCTCGGGACAAACGATCTCGTACAAAAATTGGTTAACGAAGCCCCCCGATAAGTTTGCGGAGTACTGCCTTGGTGGTTATACACATTTTGGGTCTTGCATTTCCGCCGGAGTTTCGGAAACCGCGAGTGATGAGGGACGCTGCAGGCTTTCGTCCTAGTATTGGCCGTGTGCACGTTGCCAGCTTCTGAGCGCACAGATTTGTCTAGCCCCTTACCTTAACTATAGCCGGTCGGATCAGTCCTGATAGTGGACGTTGGCCGGGATCTATTGTAAACGTTCTATAGTGGACAATTGACATGTGCACATGGCTACCTTCCCGATTCGTGGCTCCCACGGCCGACAAGGGAAGTCACCGCACGCGGTGTGTTCGTGTGCGCTAATAGGACCCAACTGCTTTAGAATGCGTATGGTGCTGAGGAAATATCGCGAAATTCCCCCAAGGACCGCTGGGCATCGCGATTGCTGGCGCGTTTGTGGTCCTTATCAGAGACGCTTCCCATAGTTTGTAATGCGACTGGAGCTTATAGCCTGTCGAGAATAGACACAAGTACGGTTTTTTTAACAAGTGGCAAAACAGGTGTACACACTTCAGGCTTGACGAATACATATAACCCTCCTCACGCGCATCATTGCATTGAACTTGCGTGAAAAGCGTTCGTGAGCTCTGGCCCAACGAGGGTAGTTGGTACAGTACAGTAAAAGGCCGTCAGCCTTCGCGACCGTTGTAATCTTGCTTGTAATGCCAAATACTTAAAAGCGGATGTGAAACGATGCAACCAGACAATGCCGTATCCTGTGTTAATCTCGCGGATGGGAGCCTTGTCTGCACGTGGCAATCAAGCTCTTGCGTGTGGTTCGGACGCTTCGCACAGACCCTATAACGACGGTCAGTTATCCTCGACCCCCGTAGTCCGGAGGTGCCTAACCAATACATTGGAAGCGTAAATCCTGTGACGAGTTTTAGGGAACGGTCTGCAACCGCATATAAGTGGGCTAGATGATACGCATCGCCGATACTGGCCAAATTTGATGAGGAGGCCGGTGAAATCGAAGGGTGCGACTGGTTGCATATGAGGGAACGCTCATATGCAGATGAGGACTAATGGATTTATTCCCCCTGGTCGAAGCATATGGACACAAGTGGAAACTCATAGATCTCTATAAAGGGTATTTTTACAATAATACTTTTTCAAGTAGGGCTGTAGATTTGGTTCTCGCAACGTGTCTCAACATGGGATTCCTATGTGCCTCTAGGAGGTTTTCAAAGTACTATACGGTGGTTGCCCAACACGAACTCTACCTGCAAACAGGTCCTGTCGGGCTACAGTGGCAGGTGTGCAGGGATCGACTGCACCGTTCGATGATCCAATAGACTGTCGTCGAGCTGGGGTAGGGTTGAGGAAGGGGCAGGGATCTGGTGACTAGATGAAAGCGAATTACGAAGCTAGGGTTACCCATGATGAGTGGTAGTGGACCCATCTCTTGCACGAACTACCTGTAACAACATAATGGGTCCAAGCGGGACGATATACTCTGGTACCCCCCTATTGGTATTCACTTGCATGGCCCGCAGGCCACCCTTTAACCGGGAGTTCCGGCCCATATTGCATGATATGGCTTGAAGCGGAACCGTAGAGGGAACCATAAGTTTTTAGCTTGAATCCGCTTGACCGATACTTCAGTGTGGGAATGGGGCGCCTCTGGTATCATATTTTCGTCCTTGCTCACAGTATGCCTAAAAAGACTGATGAGTAAACCTTACCATTAATGCGGATTGGGAAGGGTTTTGTGAATCGTCGTGCCCTAACCTGCTGGTAGGGGAACATTCAAGGCCTGCGATTCTAGTCTTAGAGCTAATAGTACCTGAAGACGGCCTCTAACCAACAGTTGTCACGTAGGCTCAGCGGGAGATATACTTGCACAGTTGGTGTACATTAGCAGAAATAATACTTTTATTGTTGTCCGGAATCAGGCCCAATTGCCTATGAAAAAGGCAGTTTATAATCCGTATCTGAAAGTGTATCCGGGGGAAGCGATGTAGTTTGGAGCTGTTCCCTAATGTCGGTCATAGTCAGGTTTCCAATTTATGCGCGAGCTGACCACTGGGGGGCATTCCTACGGGGTGCCCACAACATTAGGTCATACCTAAACCAGAAAACAGGGTATAAACTCGACGCAAATTGCAGACATTTCAGGCCTTATGAACCCCCCATTTATGGGTTACTGTGGTGGGTTCTTCCGTCATGGCCCTCATTAGTATAAGCGAGCTTGTTAGAGATCCCCCGACAGTTGGCTGCCCCGCAGCAGGTTTCCACCTTAGAATTTACAGGGCAAGCTAACAACCCATAGGCTCACCGTGTTAAGGCGGCGCACTTCCGCTGGTCATTATGAGGCTTCAACAGAACCTTAGGACGTCTGTGAATAACTGGAGGGACCATACGGGGATAATCTCTGCACAGACTCTCTAGGCTGCGATCGCCTTAGGGATATTATAGGTAGCCAGTGAGCCACCTATCTGGCCGTGGTAGGGTCTTTGAGTACTTACATCTGAGGGTGAATTGCTAAAGGTCCTAGCACTGATTTGCTCGTTTGTGAGGACTACTTATGTACTCTCCCCTGTCATAGGGGATGGGGAGCTCATCTAACCTATCCGTAGTTCCACACCAGTGGATTGGTGCTAATCAGCAGGATGCAATAGATAGCAATAATTATGCCAGCTCTACCGTACATTCTCTAGCTTGTGGGCAGCTTTTTAAGGTACGAGACCGCCCATCCTTCGAAGGTCATCTGGACGGAAGAGAATGCCTCCCCTATAGGGCCAACAACAAAAGCCTAGACCTTACGGTACAAAATGAGAATCCAATTAGTTCCACGTAGCTGTTGTGTATACAAGCATGTAGCAGACCACATCTACGACGCGGGGGTATCACTGAAGCGCACACGTCGAGCGTAGTCTCATTCTCTTTCGCGTCAGTCTGGAGACTAAGGAATATGCGCAGGCCTGTCGTCTTTTGAATGCTCAGAACAACTTTGGGAGGCTAGGTCGTGCACAATCTCCCGTCCCAGGGTTTTCGCGACTATGGCTCAAACGCAGGAGATGAATAGTACCATCGTGGCATCAGGGCCTATCCTTCATATTGAGGGTTACACACGCTCGGCCATGGGTCGTAACCCGTTTGCCAAGCTGCAATGTATAACGTAAGGGGCATGAGACACTTTACAACGCGTCGCGACGTTGTAAGATGACGGTGCTAAGCCGGCCGAATGGAGATCGATACCTCAGATGCTGCATTATGATTCGGAATCGATAAGGGGCGTCCCATATTTCGTACGCGGATCTTATCCGGGACGCGAAGTACGACTGCTTTTGTGTCGTACCACTGCTATCTCAACCCCCGGCTAACCTACGCGTATAGCATCAGCGGTGAAAAAAATGGCGTAAGTAAGCTCTTATACTTCACCACTGTCCGCCACCAGAGGGGTACGATAGATCTGAAGGGCCGAAAACGGTCGTCAATCGAAGATTGCGGTAACTACTGTCTAGTTCGCTCTCGACTGTCTAAATAGACCTCTGACACGGCGTAATACTTTCCGTATTTTCAGAGTCAACGGTTCTGAACTCCAAACCGAACGTTGCGTCCCCCAAGATGAATGGAGAGGAGCATCCAGTCTGGACATAATTTAGGATAGAGAACTCTCGCTACAAAATCATATTTGGTGTCGTGCGATCTTTAACACAGTAACGCAAGAGAACTAGGAGTGGCTCTCCCAAAGCGCTGCTCGCAGACTTACATGGTTAGAGATACGAATCGCTGGGGTGAACGTAGTTTCATGAACAACTGCATTGTTCCTTGTAAAAGGCACGATCTGTGGGTGGGCCAAGAACTCAGATCAGACTTGGCCAATTCTATGTATCCAAGCCTCTTAGAATAAGCGAGAGAGTACAGGGGAGGTCGAGTTTCTAACTAATCCTCCAATACATATCAAGAGTCAGCTGGACATTACAATATGTTTGTTACAATATTTACCCTCCATGTACCCCGATTGACGAGCCCTGTCGAAGCCCCAAGGTAACGAATCCGTAGAGTACACAAGCACATGATCATCAACCAGCCATTTGTAGACACTATCTAGATCAAGAAGCCGGGAAGACTAGGACTAGGGGAGGCCTAAAAAGCTCACTAGACAGTCCGGACTACCCTAATCGGCGCTCTTCCCCTTTCGCAAGTGACGGACGACTTTTGTACGAGTGCCTAGATGTAACCCTTTTGTCGGTTAGTTGCCAACGGCGATTGTCCTCTCAAATCCGAATTGGCAAACTGCCCGTAGAACGGTCTGTAGGCATCGGTCGTGCTTCCTATTCCTACCGTTGGGATGGAGCTAGACACACCCGCTGTATATATTGTACTGCCTCGCCCGGGCAAATCTTAGGAACCGTCTGGCTATTTAAAGCATTGCACCTTGTGGTAGGAACTAGGGTATTAGGCTTTAAAGCGCCTCTACGGCGGGCATATGCCTCAGGGTATTTCGTAGCCACAAGTCCGTCTTACGCCGGCTTACGCTAGCCGTATGGCACATATCACCGAGAGGGTCCCGAGCTACCTAGTGGGTTGTGAACGCAAGGCGTTAAGGTGACTTAAACTGTCACAGGTTGTGCCTCGACCATGCACCAGCACGAATTAAGAATTAGGGTGCTCGAGCAAAACCTAGGTCCGCTGCCGGACACGGTTGACAGCCTCACCGAGCATCACAAGAGATGGTTCTCCACGCCGCACACACGCGGGTGCTACTATAGCCAGACATGTATAGGAATATTAAGTTAAACATGATCAGCCGCCACTGATCGTAGTTCCAATGAAACCTCAACCTTCCCGAATCGAGGCGCAATTGAACGTTTGCACCCCGCCTAATTCATCTGAAGGATAGTTCCTGTGGAGCTACCACCCCTCCATGGCTCTTGCTGATAGATACCATGTGACTTCTCCGTCCGATCACTTCGTTTACGTTCTACCACGCCTTCCCTGTTGGTTCTGCTAAGCGTCGAGCGCATGAGTCATATAAGTAGGGCACATAGATGCCATGCGCGCGGGAAAGTATTACGGTGAGACGGAATGAAGCTTGTCGATAACTCCGCGTAATCACCGAACATTTCCACTGCTGAGCCGGACTTTCCGGTCACCTCACGCATGCCAACACAGCCCAACCATATTGCGACAGGGTGGCGACATACGGTTTTCACGTCCGAGTAGATCTTCACTTAGTCCGTCGTAGACCGGTCCCGAAGGCACTACATAATGGTTGACGACGTACAACAGCAAGTTTCTAAAGCTCATCGCGCGCGTAGATATGTTATGTACTCTAGGGGCTCCTCTAGGATATGATTACGGTACTTGAGGACTCTCTGGTAATCGAGACGATTCGGAGAGGCGAAACAAGCGCCCGTTGTAGCTCACCCCACATGAGTGGTTTCATTGCGGCAAGATGTGGTACTATTTTTATGACATCGTGTGGCGGTCGCGTCAACGAGAGAGTTATTTCATCGGATCCGACTACTAACCCCGATCTTTGGGGGCGACGCAACGGTTAGCTCCATAGGGGCAGCACGACCGATGCCAACACTCGGACAACTAGCGCGGCCTCTACGCCTGCCAGGAGCACAATCATCTAGACATATTGACCGCCAAATTCCCTCCCTAGTCGTTTCCAAGGTTATGTTACGAGCATATGACCACCCCCGTAGCGGCAACTCCTTGTAGTCGGAACCGGATTCAAAATATCATGAGACTGCGTTTCTTTTTGGCTGGTGGAGGTATATGACTATCGCGGTCCTCATGCGGCGTTAGAGCTAGCTGAAGAACCACCCCGCTTGTCACCTTTGCTTTTCCACTTCGGCACGCTGCGGATATGGAGACCGTCTCACCCCCCAAAATGCTAACAGCGATACCGGTCGACCCGCTTTTTCCCTAGTTATAGTTGGAGCCCAGCCTGGGAGTTCTACGACGGGCCCATGGTTACTATAACAGCTGCCAGATGGACTTAGAGCTAAGTTGCTTCATCGGTCACCCACTAAGTAAGGGAGTGAGACCACTCCCGGGGACTAATCCCAAGACAGCAGTTCCCTCACACTACACTTTCTTATATGAGTAATTCAAAGACTCGTCGAGCTCTCAGTCTATATTGCGTGCTAGCAAGCTATAGTGAAAACTCAAGCATTCCGCGGCGTTTACAAGGATAGAGGTGCCGACCGAGAACCCCAACCGCGGTCATGTGATCGATCATGGGTATTAACCGCCCTGTAATGGCCCAGTACTCCTCATTAGGTCCCGTTCGGCAATCGCATCTTAAAGACTGGCGGCGCGTCCCGCGCATCGCATTGTGCGTGTGTGTAAGCCTTATAGTAGCCAGACGACGAGGATTGTCGCAATACTTGTGTTCACAATTAAAACCTTTGCGAGGGAGGGGAGTTGGATATTTGCTTTACAGTCCTATATTGAGAGTTGGCATGCACTATCGCCTCTGTACGTATACAACGGGGGTGCTACGCCGACCGTGGGTTAGAGTACATAAGTCCTTGATGCGTTCGTGGACATCTGTGCAGTCTGTCTCAAGTCCAACGAACTTGTTGACTTGCAGCCGTTGCTGTGACTTAATCCGGTACTAGAACGCTACTTGACGGACTCCTGCTCAGGGATTAGACCATAGATGAAACGGCAGTTTACGTTTCATTTTAATAGTGTACCAGGTGACTAGACTAGGGATGAAGCGCTGAGGGTTAAAATACGTGTCATGGTCTTTTTTCGTTACTCAACTGGGGACCCATATCACCCCCCGCACCTCTTCGTCCACTGGTAGTTCTGATGAGAACGATAATGGTCATTGGGCGCAGGTATTACCCCCACGGCGGCATATAGTAAGACCTTGACGTCGTGTAAGCCGCAGCCGTGGTCTGGCCCATCGGCGCAATCCGCCAGCTCCGAATTGGAGGACGCTATAGCGGAACCACCGAAACATCAACTTTAAGCATCAATTCAAAACTGTATTTCAGCTACTCCCGCACTCCCCTGTTCACGAATCTTAGAGGCAAAATTGAAGTTTCAGTGGGACTGAACAGGATTCCCCCAATGTGAACTTCGACGTTTCGTAGATCATGCTCAGAAGTATTGACAACTTTTCGTGACCGTCAGAATAGTAACTTGGGGTAACTGGTTCTCTTCCCACCAGTGAAGGGTGAGCTCCCGGCGTAATAGGCACCGTACCCCACCGAGCACCCGCGAATAAACGACTCTTTCGGGTACCTTTTGCCGACTTTTAAGTGAAGGTCTGTACCGTCGAGTCTCAGCGCTGATTGGCACTGCTGTGCTCATGCCCTAGGCGTCGCATCCGTGACACACCCATCCCGTGGTAGCACCAATAGTACCGGAGGCCATGCAAGAGATCCAGGATTTGGACAGATTATAGATTGCTCCGACTAGCGATCTCTTAAGAATGGTACCTCTGTTCACCACCACGACGTACGCTAAGACGGTTAGTCTAAAGCTGATGGTCCGGATATTTCAGTAAGACGATCGACTAAGTAACTCTGATCACTAAGTGGTATGTCATTGTTATACAGCAGCTCCTTCCCCGGGACATCACTAGTGGGGAAACATTTCTATTTCCTACCATGAAGGGGTCTAGACGACGGTTCTCCGGCTCTAGAATCTAAATGACAGTAGACCCTCAATCGGGTTGGGGCATCTTACGCCTCACTTCTGGGTGATACCAGGAAGGGGTGTTTTACTTAAGGTACGGAACAGGGCGCCTCACAAACCCTATCGCGGAATATTTGTTAGGTGCGGACATCGGCACAGATCACCGAATGTCATCGACCGAACGGCCGTTCCGTACCGCTAGCAGTGTGCGGGGGCGGATGTGGCCGGGACGCCGACCATTGCGACTAGTTGAAGCATAGGTTTGACTAACAGAAGGCCCTGCTGCACTGTGCCTTCAGGAGCCCTCTTACAAGCTGCTATAAGCACGAAGTGGTGCTGAAACTCTAAAATCCACACTCCGCGGTATGGCGGTATCCCATACAAAATGATCGATTGGAACCAGATCTGCATAGGTGTCCCATTGCTTCAGATCGGTGTCCAGCGCTGCTGGGAGATAAAGACCGTTCACAGTCGCCTTTCCAGAAAAGTCAGACGATAAAGGCTCAGCTCGTAACTGAATTCTCGTACGACTCGAGTGTTGTGAAGTCACATTATGGGCCTTAGGTCTTGGAAGGGTTTCCGTAGCGGGGGTACGCACCTTCTCGGGCAGATTAACGACACCGTAAGAGTACCAGTTATATCGTATTCCGCCCCGCGTATCACATTGCATTGCTGTCAGAAACAGAGCAGATCATGTCAATCACCAGTCAGTCCTGGGTACGAATTCGAGGCCTTCATTAGTTGGTTTTTGTAAGGAGATGTCCAATGTGCAAACAAATAGAGACGATACACCAGTTCCAAGTCGGTCTTATTCACAATTCTTTTTAACATAGCGCGCCAAACTCGGCACACCCTTGGTTACCTGTCATCGCTACGCAGCTCGTTGAGCCTAGCGCAGGCCTACCTCCCAGGTGTTACGACGGTTCAGCGCACTATCTGTAGATCGTATAATTAGGGAACTCGAAGGCTCGCCCGCCTTAGCGGACTGACCCCAAGGCAGGCAATCGCTGCCGCGCTGACCTGAGGGCTGAATAGACGGGTGCACATCTTCGCGTCCAAACGTCCTTCCAAACACGTCGCGTTAAAAATGCTTGGTCTCGAGAACGTTGTCCGGATCCCAAGGGAATCCCACTCACCCACGCCGATATGTTTTGCGAGCGCCGAAGCGGATACGTAAGATATCCCATCGCCTAGCCCCATACGATCGGCTAGGCCAGACAACCATTGCCCTAAGACGTTCTGGCACCACCAGACGTTTGTGCGCTCACTAGGTCAGTACTAGTTTCGCGGTCGATCAGACTGGGTGTGAGCTCACATCAGTGGTCGTATGGAAAACGCAGCATCGTACAAGGGCGTTAATGCCAGCCTTTCGGTACGATATACTACAACGTAATTGCACACCGGGGGATTCACAACTCTAATTCTATTTGTCCACCCAATCCACTGCATCACACAGAAAATTCCGCCGATGCTCGATACCGGCGCACTCCAGTTCAAAAGGAGGACAGATCTTTTTCACAATTGACTATAGTGATACTCTTGGCAAGCAGTTGTTTGAGTTATAAAAATGGCACACCTAGGCCAGAGATCGAGGCCGATGCGATTGATTAAAGGGATTGCTACGTGCTAACCCGAGGGGGCGTGGGATGTAGTACATCGCGCACCAGCAGTCGTTAATGAAATTAGTGTCTTTGGCAGATTCGTTGACCCTACTAATACAAACCATGTGAAACTCAATAGCAGGCAATTGCATTTTATTGATTGGGGCCTGGGAATAGAATGGGGGCCCCCTGTTGGCCCCGACATGTAGGTAATAGGGCGCCCCACCTAAACTTGATGATATCCGTCGTATCACGTAGAGAAACTTGTAGGCTAGTTGCGCGGATTAAGTAGTTCTATGGCGGCCTGGTTTCGTGTGCTAACCGTCGGTCGGCAGGTGGGGTGCAGGTGCGGCTGGCCCCAGGAAAGGCCAATACAGCCCTTTTGGGCTACTCATATCATAGAAGAAGTTTAGACTTAGTAAGGTACAAAAACGTGCAAACGTTGCCCTAGTGCCGCGGCAGCACATATAACGACCTAATCAGTTCGTCGATCGTAATCCAGAGAAATGACTGGTCAGTCTTGCCCCCGCGGATTCGCCGTACCCACGATTGTCATAAATTACTGTTGTAGACTAGGTACAAACAGTGTAGAAAATTAATTTGGGTGCAAGTCCTAGAGAGCAGCGCGCCCTTCCGTGATTCAATGCATCATGGTGCCACGGCAATCAAACGGCACACCATGGAACCTTCCACGGCTCGATGCCGACCGAATTGATCCCCCGTACGGGCTTTACAGAGGTCGGCGGCGAGTGAGAGTTACACCAATGTCCTCAGTGTCTCCCAGTGTAAAGGGAGACCTAGTAGCAAGTATCCTGATAGTCTCGGTGCCAAACCAGCTTGCGCGGGTATGCAGTTTTTGAGAGACCTCCAAATTGCGATGAGCCACTGCCGTCGAGGGCTCTGGGCACCCGAGTCCCGCGAGGGGCCAGCATTGGCGCCGCCGCAGAAGAAAAGCCTCACGCCTTAACCAGTGAATATCGGCGTGCGCTCCCGAACATCGGAGCAACCAGGAAATAATGATGGCCGCTAGGTTCCCCCCGCCCAAAGTGTGCGTCCAGATCGTCCCCCTAGCGATTGTCTGAGTAATATGGCCTAACAGGTCTTTCGACCAGAGCATCATGTTACATATTTCAACAAGTATCCTTTCACTACCTTTAGGGTGTGCATGAGAGTAGATACCTACGATCCAGCGAGTAGGACCGTCGCTGAGTGAGATGGATGCTTTATAAGGGCATGGGCTCACGTGGGTTGCAGTGGGGACCTTTCCATCTCCTTAAAAATTTAAACTCCCTACGAACGGCACCCCTGAGTTCGAATAGATACCACCGGACTCCGATGGCCCCCGGCACACGTGACACCTATCGAGGGACAACGTATGTCCCAAAGAGTCGAGAAACCGATAACGGTGACGCAGCCTAAACGCCCCACAAATGCGAGTACGTGATGTCGCTCTGTATGAGCGGAGCGAATGTACGTCGCAGCATATGCCCCACAGACGGGACGGAGTGGTTCAAATGCCTTTGAGCCAATGCTAATAAAAATTTCTCGTGCGCTAGCCGACGGGCGTCTAGAGTTAGCCGAGATCAGGGATATCAACTAATCTGCGCCGCCTCTCCGCTATAACAAAGTAGATTTTGGTCCATGCGACTCCTTGGAGCACGGAGACCAACTGGCTATAGCGAGTTAGAGCAGTAACGTAATGCAAGTGAGATCGTTCTGCTTCGTGCGGAGGGGAGTTGGAAAGACTACAACAGAAGTGCGATAGGTGGCCCCCAGAAATGGTCTCATGACAACGGATACACAGACTTGGTACTATGCAAGAAGTACTGACTCTTCATTCCTATGCAACAGGCGACGGAAAAGAGACAGGCCCACCTGCGGTGTTGAGCAGCGAACATGACAGGCTGTTACCCTGAGGTGAAGCCCTATCTCGTTGGTCTACTATAAACCGAGCCTAGAGGATAGTGTCTTTACATGCGGAAACGACAATAGCGGGACCGTGAATCGCTGGAACTTTAGGTTAGCGCCGTAGACAGCTCTAGGCTATGTTCACAGGCCCCACTAAACCGGCTATCAGCGATATCGCTTTTAGCGAATCGTTCTACGAATGTAGTTTGTCTCATTGATAAAGCGCATCCGGTTTGCTAGACCTGCATGGAGAACGATACTTCCACCGAGAATGCAATTGGAGCAAACTTGGGACATTAACCGATCTATCAGACAGGCACTTGTTCCCCAGCATGAAATCACATCTCACGATGAGCCTTGTCCTCTGATTTCAAGAAGATTGCTACGACTTTGCACCGTAATGCCCCAGGAACGAACCGAGGTGAAAGATAGACACCCCGGCCGAGGCCTCCATGTGCACATAAACAGTTTAAGGGCCGTCGGGCGGAATCCGAACAAGAGCGGGCGACGACCGCGTCATGTTACGTGTCTATCTTCCCGCGCAATCGTATACTGGAAGGAATTTATACGTCGGCTAGGGTGCATATAACTCGTTGCGGTGTAACAATAAGCATCGAAGGTGCGAGTTTCCCCTAAATAGCGGGAGAAACGCGTTGCGGATTGCTCTGAAGTAGGGTAATCTCTAGGTTCAAGACTCGTTGAGAGGCGTCGCTGCACTAGTGTCTTAAGCAATAGGTATATTCTAAAGTCTTATTTCTGCACTTCAGGGGTCTGCGTAAAACCGCCCTGTCTCATCTCATCGGCTACTCACCAAACCACCGAAGACGGAGTGTGGTAAGTCAATAGCAGTCGTACCGAAACCTTATATGTTATCCTAAATGTTGTGTCTGAAAGTATCTGCCCCTTGGCTCCGGAGAATTCGCCTTAAACAATCTCCCGAAAAGGCCTAGGCTAATCCGGTGCTATGCAGAGGGCATTAAATATATGGCTTCGTCGAGTATAAGATTTGGGGGCGTGTGAACTGATTAGCGCGCTATAGGACCAGGCCGCGACGCATTAGACATAAAGTCTCAACTGCACTACCTCGTGCTCCGATGCTGCTCTAGAATGATGCGGTTGGGTCTGTCGACTTATAGTGCCGTTCGTTCAAGGGATGTTTGTGAATCAAATGGAGTGTCCTTTTTTTGGTTTCTCCCCTGTCGAAGTTAATATCTTGAGAGACACTAGTCGACAGGAACCCTGCTCTATGAAGGGCCATTTCACTCACGACCAAACGCGTCTCACGCACTACTGCCCTGACGCCCGGAGGACGGACTATTAGATTTTCTAAGTGAGAGGTTCTAAGAAACTCAACCTGTGCACGCCGGAGGGATACGCTATAACGCACATTGCACCCTGATCAAAATTAGCGTCTACTATCCCCCTGGAGTGTCGCATAGACATAACGCCTGGAGCATTCTGACCAAGTCACAAATTTTGAGCATGCATATCTGTTCTGAAAGGCTGCTTGTGTGTCGCGCCTCGGGCTGCGACACTTTCCCCAAGTCTTCCGGGGAGTAGGGCGGTTGAATGTGGGTGTTCGTCACTTCGACCATGTGACGAGCGATAGATAAAAATTAGATACGCACTCGTGTTACGCGGCACAGGATTAATCAGACATATGTGAAGTGGATGCTTGACCCGACAAATTGGGGTAATAGGATCCGAGACACAGCAGCCCCGGGCGCAAGACTGCAAATCCCGATAATTCCACTCTCCATCCTAAGAAGTTCCTTAAAATGTCAAACACTGAAAACTTTATGATACAGGAACTGGCTTGACAAACAGTAAAATTGCTGGTGTCTCGGGGCCCTTGGGAATGATATCCAGTACGAAAGCCTCATCTTCTATATGCTTCTAGTACGAAGAATAATTATTATTTATGGGCCCTTCATCAGCTCGTGATTCGTGCCTTGCCGGCCGACTCCTGTCGCTTAGTGTCGAAACGACCAGGGATCTGTTCCGGTACATTTGAGGACGCAAGAATTATATTGATATATCCTCTGGGGGAGGGTAAGCCGCTCCCTTAAATCCCGGATTAATACCGGTGATGACACGGATCGGGCCATCGGCATGTCTGGATGTAACGCGGGGATTGGCGGAAGAAACCGGTCCGTTACGGACTCCGATGCCCGCATCGAATGCCAGATTTCGGTGAATTCAGTCTTTCGGGAGGGACAGGGTGTGGATCGGGTCCACGGGTGAGAACATTAGTTCCATAAGCGGAGGTTTCGGGAACAAGAAACCAGTCCCACACGTGATACGGCATCCTGCGATCCGATGCGTTGAGCGCTAGGATTCTCGTTATCGAGGTCCGTTTCCTCAGGTGCAGCCCGACGAGACGTCTGATGTATAATCTAACACACCTATCGGTTTTATTCAGGGCCGCGAGCGACATACAATGTTATGGAGCAGGCGCCCCTCTTCGCGTCCAGGTGGATCCGGTAGAGCCGGCGGCTGGTAGTAAAGAGGCCGCTCGTTAGTGGACCCATTGACGTTAGGTGTGTTTCGCGAATGATTAATCAGAAGTTTATCAATGACGAAAGCAGAATGCTCGGTAAACGTTCGACGGCATCGCTATCGAACCTCACGTCGTGGTTTTAAGCATAGCAAGCTCCTGCTGTACGCGATCTTAATGGTGCCGCTACCAATTACTTAAATCGCGTCGTACACTTGCCCTCCCTCCGGCATTAATAACGCCGTTCGTGATTATCTCCAAAAGGAGTAAGGGCGGATGTCAACAGTTACCCTTTTGGTTTGGCAACAAGAGTCAAAAGATGTTTTACTGGAACCCACGGAGATTTGGCCCTACCGGAAGACATTGCCTTATGGGTTGTGGCATGCGTATCGCGGCGGCGGCATGGGACACAGGTGGTCCATAGTTCAACGAGATCTTGATGACACTGTACCTCACGCGTGTATTTCTCCTGGATGTACAACCGCTAGAATAAAACCTAAGACATTTCAGCCTCAGTAATGGCCACATCCTGACTGTCATACCTCAAAGGAATGCCCGGCTGTGCTATTATAAACGAGGTTGCGTCGCTAACTAGGGCTCACAATATTATATGGGGCGTGGTGTTAATAGACGCGCCCCAGTCACAGGGATACGAACCAACTTATCTAGCGAGCTGTTGATGTCTACCGCCGGCCTCACAGCACTAGGGTTCCTGGGCGGACTTGATAAGCGGATATTTAGGCTACCTATAACTTCGCATCACGAGGCACCATCTCACAGGAGATACGTCAACTTCCACCTACGATGGACCTCGAGCTCTCCGCGCGTGGCGTGAGATGCATTCATACAGGCATCATCTAGTCGGGGCGCTTTTACCCCTCACAAGACGTTTGAAGTGGAGGGCCCGGGGTCGCGGTGTCAAACACACCTACCCCGTGAAGTACACAACAGGTGCGCCACTATTGGTCTTGCTGTAGCCTTTAACGACTATCACTTAGAATGAGCGGACACTAGGCATCGCGGAAATCTAGAAGCTGTAGCTGTAGCATAGGGTGAGGGTAATTTCAAACTTTGCCAGGGTGTGTCTCCTCCTCTTTTAATTTCTATGCGGCTAAGTCGGTAGACTATTTTTTTATAGGCCGTGCACGTTTTACTAACTCGCCTGAGTAACATCTCCTAACCCCTAAGACGCAGTTCTCCGGCAGGAGGACGTGGTCCTGGATTTGTAGAAGAGTTGCCGCCTTGGGCATGGCCCCATTCATGTGCCCCCACGCACATTGGTTGCCTGCTCCCCTGCAATGTTCCTAGTGCCCATTGGAAAGTGTTCTAATTTGACAAAATAACGGGTACCAATACCGAGGAAGACGTGGAATTTGGCCTACGGCTCCGCGAGTTATGGGGGAATAATGTTTATTCCTTCTAACTTACAGCTGGTATGTGGACTCCTGTTACACGTGAACTATGCAGCCCAGTTGTCGCCTTGTGTTAAAAAATCAGACCGCTGTGTTGTTAGGAGTGACGGACTCGGACTATAGTTAGAGTTGATTTTGGCAAGAAGATATGGGGGCTCGTCTTATTAAATTTCGGGTTAGTTGCAGCGTTGCTCCTGCTGGCACTCTCCGGCCTCGTTACCTTCATCTTTAGCTAGCCTAAGGAGGCACATATGTTGATCTTCTGCGATAAGTATTCTAGGTGTGGAAACGAGACGCTTGGAGCGTGCACTTAGGCGTCGCGGCTGTTCTAGCGTCGGAATACAAGGTTACTGAGGCTTCACCGTATAATCTTCGAAACTGTGCGGTGCCGCCTGAGCCGTTGGGTTGGTCGCTGTCGTACATCGGTTTGGAGCTGAGCCGGAACGGTGTGGATCCAGTGTCTTCTACTTGCTTAATATTAATCAGTCTCCCTAAGCCGTAAAGCCTGTGCATTGTGTCTCCGGCCTTGGGAATTCCTAGCTTGGAGAGCAATCACAGCTAAACGATGAGAAGAGTAATGGACGAGACAAGGTACCCCGTGATCGTTATTGTTCCGTTAGGTGCTGGCAGGGGTCGTTGACGTGAATCGCGCCCACGTGCGGCATTTATGATTCGGTGGAGCGTGTGGAACGGTTCCGGTGTTCACGCAGGAATAGTTGGTAGCTATAGCATCGTGAAAGGAAAGATCGGTTCAAAGCAAGTCCAGTCACATTCCCTGGTTTGTGAAGCAGTATATAAATCCGTCTCTTCTGGACATCTACAACTGTATCAGCCGCTACTACGCGACGGGGCTCGTTCCGAGAGTCCTCAAATATTCATAGTCTTACCAGCCCGCGCTCAGAATCTGGAGCCATTACTACTCTTTAGTGATGATCTACTTGAGAAGGTTACGCTCGTCGAGTATGCATCAAATTGTCTGCTCCGGAGTTACTACATCCACTGAAACGAATTCTCTTGTCGTGGTCAGACCCATACATTTTCCTTTTCTGCTTCAAAGTTAAGCGAGTGCTTGCCAAGAGGAGTCAACGCGATTCTCAGCGGACTCATTCTTACAGGGAACTCGTTATTAAAGTAGGGGAACTCAACAACCTAGAGCAGCCTGTTGTCGTTCTTTCCGCTTAGTCCTCAGACGGTCTTAGGAGACACTGTTCGTTTCTTTGTGCCGGATGACAGTCAGGTAGCCAGGACTATCTCTGGAGCTCCAGCAAAAGTGAGAGAGCTCACATAGTGCGCACGAAGAGAAAATGCGAGTAGTCCTTAGTCAATTGGCTGGACGTGACGAGACATTGCAACCGTACAAGCGGTTCGACATCCCATACCGGATCATTGACCATTGCGTTAATACACGATTCACGCCCCGTTTCAAAAGGGGAGCAGAGTAAAAGCGACGCCGCGTCTGAAAATAATCGCTTGCCACTCCAATCCCAAACCACACTGTTGGTTTATGAGAACCGCTAAGCGCCACCGCAACAAGCTTACCGAAACGATCCGTCGCCGCGGCTACGAGACCGTACCATCTAAGGATGCTCATGGTGTTTGGAGGATTCTGCAGGCGTGAATGGACTCATCACGACTAACGTCGAGGCCCCGTGAACCTTTAGTTTGTCATCTTACCCGTTTGCAGCCGCCGGACATCAGCCTTCAAATTTTCGTGTCTGGTAAGTAGGGGTATAAACTTTGAACAGGTGTCCTGTAGGGTACCATGAAATTCCTTCCATCCCAGCGGGTCCTGACGTTTGGCCGACCGCTGTAATAAACCTCGACGGTTGGACGAGTTCCTAAACTGCGTGGTTTCGCGCTGGGTCACGTGTGTGTAGTTTACGAAGCGTGAACATCCCTCGCAGTAGCTAGGTGTTCTTTTCCCCATCGACTGGAAATGAAGGCAGTATAGGTTGACGCACGTAACGCCGGCCTGGCAACCATCTTGTTCGCTAAGGGGACACGGGGGTGGGATGCCCCGATTCACTGCTCCGCTAAATCTCTCGAGAAAGTGGAGCACCACAGGGTACAAACTCAAGTGTCCTGCCAGGAGACACTCATATCGTTGGATGGTCGTAGCCTCTGTAATAAGCGGACTAAAAGACCCGATCGATGGGGACACATTGTTGTGAATGTCAGCGAATGCTATATTGGGAGGCTTAACCTTCACCCTAATCATGTGTTTAATCCACTGATCGGACTTGATTACCGGAGTAGGGCGAAAGTAAGTGTCAGTTCCCACTTGAGCTTGGCCACAGTAAATGCAGTGCCGTATTGTCTGAGAGAAACCCCATCAATAAGACGAATAACATAAAACCTGCAGAGCATCGGGTTGTTCAAAAGAACGTTCAATCTTGGTAGACTGGAGTCAAGCGTTCCGATTTGGGGTTACGATAGATTTCCTATGACTGACTCGTACAAACGCCTAACGCAAGATGTGAACCCATGCATAAAGGGTATTACCGGACGTATGGCAACACATGCGGCTCACCGGCCCCACCGCGTGATATGCACGGACAGCAAGTATCGACTAGTTGTGTAACGATCATGTAATAACAAGGTGCGTTGAGTGAACTGACCCTGTGGTCACTTGGACTTCGGTCTAGTGTGACGTCAGTACATATGCCTGACGCCTTTATGCTCGCCCGCGATCAGCATGAAGGCATTTGAATTTCCTTCCGAGGTATGGAGCACGGGTGGCTCCGTGAAGCAAACAGGACGTACAGCACGGGAAGCGCTAACGAAGAATGAAAAACGAGAGCGTAGAGACTTGTTTGGTTTATTCCCATTCCGACGTGCTCCAAATATTAGGTCTCGCCAGAGACTGGCGTCGGTCAGTTACTTTCCGCTGCGTATGCGTGGGTTTAATGTGACAGGGGTACTGACGAATGCCCTGGCTCAACCATTATTGCTGACCCCCGCCTAACACAGAGGTCCTTCAGACCTTGACCGTACTCTTAGGGGTGCCCTTGTGAGTAATCCTAAATGCCCCGGCACTGTGTATTTAATGTCAATCAGGATGTGAGGCGGGGACCACAGGCTAAGCGTAGTTAACCTTGTGCTTATTGGCCTCTGTATGCAACAAAGAGAAATACAAAAGATGATCTACAATTACCAGAGCCTTATAGCGCATGGATCATGAGGACGGTACCTTTTACATTTCTGATCTTGGGACAAGTAGAGCCTCCATATCTCACTTGTCTGAATGCGGACCCTGATCGATGGCGTCTTTATTATACGAAACTGGATGAGGGCATGGCCAAGGGTTTTCTTGCCGCATCGGCAGACACCTGGTCCAGACGAGTCTGGTTCGAACTACT",
            "TTCGAACTACT",
            6)

        for index in indices:
            #print(f"{index}  ", end ="")
            print(f"{index},  ", end ="")

        self.assertCountEqual(indices, [9,  13,  16,  23,  30,  33,  40,  49,  54,  60,  69,  77,  84,  87,  99,  114,  115,  118,  129,  134,  137,  147,  151,  154,  165,  185,  188,  191,  194,  195,  198,  208,  213,  216,  223,  226,  230,  234,  240,  243,  258,  279,  282,  293,  296,  300,  311,  317,  318,  325,  336,  372,  375,  400,  407,  412,  425,  435,  438,  453,  459,  462,  483,  492,  494,  497,  507,  524,  531,  538,  539,  545,  552,  556,  595,  605,  609,  619,  620,  639,  647,  649,  656,  659,  662,  678,  695,  698,  708,  718,  727,  730,  739,  746,  763,  766,  773,  781,  790,  802,  805,  812,  820,  821,  827,  832,  845,  855,  858,  859,  889,  892,  907,  930,  937,  943,  946,  952,  955,  958,  959,  965,  986,  987,  995,  1009,  1060,  1079,  1088,  1100,  1112,  1121,  1128,  1144,  1147,  1158,  1164,  1173,  1191,  1197,  1198,  1226,  1232,  1271,  1276,  1279,  1280,  1318,  1327,  1333,  1336,  1345,  1356,  1365,  1366,  1372,  1375,  1395,  1397,  1398,  1400,  1403,  1412,  1426,  1432,  1436,  1439,  1456,  1463,  1466,  1476,  1485,  1488,  1504,  1506,  1513,  1519,  1526,  1540,  1564,  1581,  1584,  1589,  1600,  1603,  1633,  1637,  1640,  1651,  1655,  1662,  1669,  1685,  1694,  1698,  1706,  1707,  1710,  1720,  1724,  1747,  1758,  1763,  1772,  1773,  1817,  1818,  1860,  1874,  1876,  1881,  1886,  1890,  1892,  1914,  1938,  1948,  1960,  1973,  1980,  1983,  1993,  1999,  2000,  2011,  2017,  2027,  2049,  2069,  2072,  2078,  2099,  2100,  2103,  2131,  2140,  2148,  2159,  2162,  2165,  2168,  2186,  2193,  2197,  2208,  2222,  2223,  2235,  2256,  2266,  2267,  2274,  2286,  2302,  2303,  2314,  2318,  2331,  2337,  2341,  2348,  2360,  2364,  2388,  2394,  2399,  2405,  2406,  2416,  2424,  2439,  2454,  2458,  2468,  2472,  2478,  2486,  2496,  2502,  2534,  2541,  2542,  2554,  2558,  2561,  2588,  2591,  2619,  2631,  2641,  2650,  2676,  2695,  2699,  2705,  2714,  2726,  2730,  2756,  2757,  2759,  2763,  2766,  2777,  2786,  2792,  2795,  2800,  2805,  2814,  2817,  2825,  2828,  2832,  2855,  2864,  2865,  2874,  2877,  2882,  2896,  2900,  2923,  2924,  2933,  2936,  2938,  2956,  2964,  2976,  3000,  3021,  3038,  3041,  3048,  3057,  3070,  3082,  3088,  3092,  3105,  3112,  3123,  3129,  3145,  3158,  3167,  3179,  3189,  3198,  3201,  3205,  3208,  3217,  3234,  3235,  3241,  3244,  3254,  3273,  3293,  3295,  3296,  3308,  3323,  3326,  3353,  3356,  3363,  3369,  3389,  3390,  3400,  3403,  3410,  3431,  3442,  3453,  3480,  3522,  3523,  3550,  3554,  3557,  3574,  3577,  3580,  3581,  3593,  3596,  3599,  3606,  3611,  3612,  3623,  3649,  3668,  3674,  3679,  3707,  3711,  3716,  3737,  3741,  3749,  3752,  3759,  3769,  3771,  3775,  3782,  3788,  3800,  3803,  3814,  3815,  3823,  3837,  3838,  3845,  3850,  3859,  3895,  3913,  3919,  3926,  3938,  3944,  3948,  3955,  3972,  3979,  3984,  3992,  3995,  4004,  4007,  4021,  4028,  4042,  4052,  4055,  4058,  4069,  4072,  4086,  4101,  4104,  4115,  4121,  4123,  4130,  4139,  4149,  4157,  4177,  4184,  4187,  4196,  4220,  4226,  4227,  4236,  4237,  4239,  4240,  4248,  4254,  4264,  4281,  4293,  4297,  4329,  4332,  4342,  4345,  4349,  4355,  4368,  4377,  4400,  4414,  4428,  4429,  4431,  4438,  4445,  4454,  4465,  4469,  4478,  4482,  4505,  4520,  4523,  4530,  4535,  4538,  4547,  4550,  4569,  4572,  4576,  4579,  4582,  4585,  4599,  4605,  4618,  4623,  4626,  4627,  4640,  4652,  4653,  4661,  4670,  4679,  4689,  4692,  4712,  4713,  4741,  4751,  4752,  4755,  4765,  4768,  4771,  4775,  4794,  4817,  4821,  4836,  4851,  4860,  4882,  4894,  4898,  4905,  4919,  4931,  4952,  4964,  4981,  5005,  5008,  5030,  5044,  5067,  5070,  5074,  5079,  5086,  5100,  5111,  5119,  5125,  5129,  5139,  5156,  5162,  5179,  5186,  5197,  5204,  5207,  5210,  5211,  5220,  5223,  5226,  5229,  5230,  5232,  5249,  5264,  5268,  5277,  5280,  5312,  5315,  5327,  5336,  5344,  5347,  5353,  5365,  5373,  5383,  5386,  5394,  5395,  5412,  5422,  5434,  5445,  5452,  5457,  5458,  5461,  5464,  5465,  5470,  5476,  5482,  5486,  5489,  5506,  5510,  5513,  5525,  5528,  5531,  5538,  5544,  5545,  5547,  5556,  5565,  5572,  5575,  5581,  5584,  5596,  5600,  5605,  5616,  5632,  5633,  5642,  5650,  5667,  5673,  5705,  5708,  5717,  5720,  5721,  5746,  5750,  5759,  5768,  5775,  5782,  5791,  5808,  5822,  5826,  5834,  5835,  5843,  5846,  5880,  5889,  5897,  5903,  5904,  5912,  5915,  5926,  5927,  5940,  5947,  5948,  5962,  5965,  5971,  5981,  5992,  6000,  6003,  6019,  6028,  6036,  6044,  6064,  6073,  6076,  6091,  6099,  6105,  6106,  6112,  6131,  6138,  6147,  6154,  6167,  6171,  6182,  6185,  6188,  6198,  6210,  6213,  6216,  6220,  6233,  6236,  6239,  6242,  6251,  6255,  6261,  6279,  6282,  6285,  6289,  6303,  6313,  6316,  6325,  6341,  6344,  6350,  6362,  6363,  6365,  6371,  6372,  6380,  6383,  6391,  6403,  6407,  6411,  6420,  6423,  6448,  6456,  6464,  6470,  6476,  6491,  6495,  6503,  6507,  6525,  6528,  6535,  6541,  6551,  6564,  6592,  6607,  6625,  6642,  6655,  6657,  6658,  6664,  6674,  6689,  6696,  6701,  6723,  6726,  6730,  6740,  6757,  6778,  6779,  6786,  6804,  6806,  6827,  6833,  6834,  6837,  6846,  6852,  6861,  6865,  6876,  6882,  6884,  6893,  6896,  6916,  6927,  6941,  6946,  6949,  6981,  6996,  6997,  7019,  7021,  7024,  7034,  7052,  7061,  7062,  7070,  7073,  7077,  7083,  7108,  7114,  7132,  7133,  7136,  7142,  7178,  7181,  7187,  7190,  7197,  7202,  7218,  7226,  7230,  7240,  7242,  7252,  7253,  7264,  7275,  7287,  7289,  7299,  7310,  7311,  7319,  7322,  7338,  7347,  7354,  7362,  7373,  7376,  7383,  7386,  7395,  7404,  7411,  7418,  7421,  7427,  7433,  7436,  7451,  7459,  7462,  7474,  7484,  7494,  7498,  7510,  7511,  7521,  7524,  7531,  7536,  7548,  7552,  7557,  7560,  7570,  7598,  7604,  7623,  7626,  7667,  7668,  7678,  7684,  7687,  7688,  7695,  7701,  7704,  7710,  7720,  7723,  7730,  7755,  7767,  7768,  7778,  7785,  7789,  7792,  7795,  7802,  7805,  7809,  7825,  7831,  7834,  7853,  7864,  7873,  7874,  7877,  7880,  7897,  7917,  7920,  7924,  7925,  7936,  7943,  7953,  7960,  7964,  7967,  7974,  7977,  7995,  7999,  8004,  8011,  8027,  8040,  8058,  8066,  8078,  8084,  8088,  8092,  8105,  8146,  8155,  8156,  8164,  8173,  8176,  8177,  8189,  8211,  8220,  8224,  8233,  8236,  8240,  8251,  8252,  8258,  8259,  8261,  8266,  8273,  8295,  8300,  8309,  8315,  8331,  8341,  8346,  8354,  8364,  8380,  8386,  8393,  8394,  8403,  8424,  8428,  8437,  8455,  8461,  8476,  8483,  8507,  8508,  8517,  8525,  8535,  8538,  8541,  8545,  8551,  8555,  8562,  8569,  8574,  8579,  8591,  8610,  8611,  8627,  8630,  8634,  8640,  8657,  8664,  8677,  8684,  8698,  8711,  8717,  8718,  8725,  8727,  8728,  8734,  8738,  8739,  8749,  8752,  8758,  8759,  8781,  8788,  8799,  8807,  8810,  8814,  8821,  8827,  8830,  8839,  8842,  8854,  8858,  8861,  8869,  8875,  8883,  8895,  8954,  8970,  8974,  8981,  8982,  8991,  8997,  9012,  9025,  9041,  9042,  9056,  9068,  9086,  9090,  9097,  9115,  9128,  9131,  9139,  9146,  9153,  9155,  9177,  9185,  9188,  9192,  9199,  9205,  9209,  9220,  9226,  9242,  9257,  9275,  9284,  9285,  9289,  9292,  9295,  9299,  9308,  9322,  9324,  9325,  9331,  9333,  9337,  9342,  9345,  9350,  9376,  9385,  9393,  9396,  9408,  9420,  9428,  9430,  9432,  9437,  9443,  9446,  9456,  9469,  9475,  9483,  9514,  9523,  9526,  9533,  9536,  9540,  9558,  9561,  9564,  9571,  9573,  9592,  9606,  9615,  9619,  9622,  9625,  9632,  9641,  9642,  9663,  9664,  9668,  9684,  9720,  9723,  9733,  9737,  9758,  9761,  9771,  9774,  9782,  9795,  9799,  9802,  9805,  9815,  9825,  9832,  9840,  9898,  9915,  9925,  9926,  9940,  9941,  9951,  9958,  9982,  9986,  9990,  10000,  10003,  10007,  10014,  10018,  10050,  10057,  10066,  10070,  10083,  10087,  10090,  10093,  10094,  10106,  10118,  10121,  10141,  10149,  10156,  10167,  10181,  10196,  10197,  10203,  10218,  10222,  10227,  10232,  10239,  10267,  10272,  10273,  10277,  10308,  10315,  10318,  10326,  10343,  10363,  10372,  10373,  10376,  10382,  10383,  10390,  10393,  10448,  10470,  10478,  10493,  10506,  10513,  10514,  10524,  10548,  10566,  10569,  10575,  10578,  10582,  10586,  10593,  10596,  10603,  10607,  10616,  10619,  10620,  10632,  10636,  10639,  10645,  10656,  10659,  10660,  10690,  10693,  10697,  10701,  10711,  10740,  10771,  10780,  10787,  10790,  10797,  10798,  10801,  10804,  10808,  10813,  10823,  10827,  10833,  10841,  10848,  10869,  10877,  10880,  10895,  10904,  10935,  10938,  10947,  10948,  10962,  10976,  10991,  11000,  11016,  11022,  11025,  11026,  11036,  11046,  11049,  11052,  11075,  11084,  11104,  11107,  11130,  11134,  11138,  11150,  11155,  11158,  11159,  11167,  11168,  11177,  11180,  11190,  11194,  11200,  11210,  11227,  11231,  11237,  11253,  11256,  11267,  11289,  11298,  11301,  11304,  11313,  11320,  11323,  11331,  11334,  11341,  11348,  11350,  11386,  11399,  11406,  11433,  11440,  11446,  11449,  11456,  11494,  11515,  11524,  11565,  11569,  11572,  11578,  11603,  11607,  11612,  11615,  11616,  11619,  11630,  11633,  11652,  11657,  11658,  11661,  11673,  11685,  11702,  11706,  11713,  11724,  11738,  11757,  11767,  11787,  11793,  11794,  11804,  11808,  11814,  11816,  11819,  11831,  11835,  11873,  11907,  11914,  11924,  11931,  11940,  11952,  11963,  11977,  11981,  11987,  12005,  12008,  12019,  12023,  12037,  12045,  12051,  12052,  12055,  12079,  12089,  12105,  12112,  12113,  12132,  12135,  12147,  12150,  12156,  12165,  12166,  12172,  12175,  12180,  12187,  12197,  12200,  12214,  12219,  12222,  12229,  12234,  12267,  12273,  12277,  12278,  12287,  12290,  12297,  12311,  12312,  12334,  12343,  12348,  12349,  12352,  12401,  12440,  12452,  12460,  12472,  12475,  12481,  12493,  12498,  12502,  12505,  12508,  12527,  12541,  12545,  12548,  12549,  12566,  12570,  12583,  12584,  12607,  12614,  12623,  12624,  12637,  12639,  12642,  12670,  12682,  12685,  12689,  12693,  12703,  12706,  12726,  12730,  12733,  12742,  12749,  12756,  12763,  12764,  12766,  12773,  12780,  12797,  12814,  12823,  12824,  12831,  12838,  12860,  12864,  12881,  12882,  12892,  12900,  12919,  12938,  12945,  12952,  12960,  12962,  12963,  12972,  13004,  13011,  13022,  13035,  13041,  13046,  13052,  13059,  13067,  13076,  13077,  13086,  13100,  13103,  13104,  13112,  13127,  13147,  13156,  13157,  13162,  13163,  13168,  13172,  13173,  13177,  13180,  13184,  13187,  13194,  13198,  13204,  13205,  13211,  13214,  13221,  13227,  13230,  13240,  13242,  13251,  13267,  13277,  13278,  13284,  13287,  13294,  13302,  13309,  13312,  13315,  13318,  13321,  13325,  13328,  13331,  13334,  13337,  13347,  13353,  13362,  13369,  13379,  13382,  13403,  13404,  13415,  13425,  13440,  13444,  13454,  13456,  13458,  13496,  13502,  13523,  13532,  13541,  13581,  13588,  13600,  13614,  13623,  13648,  13653,  13666,  13674,  13678,  13696,  13703,  13712,  13718,  13725,  13735,  13740,  13750,  13762,  13770,  13776,  13808,  13815,  13819,  13821,  13832,  13833,  13850,  13854,  13861,  13878,  13899,  13921,  13946,  13961,  13973,  13986,  13995,  14008,  14017,  14024,  14028,  14043,  14055,  14062,  14072,  14087,  14089,  14093,  14099,  14102,  14106,  14109,  14119,  14125,  14128,  14136,  14148,  14155,  14166,  14199,  14221,  14222,  14233,  14240,  14249,  14250,  14266,  14274,  14305,  14339,  14342,  14345,  14346,  14349,  14358,  14379,  14382,  14391,  14394,  14397,  14406,  14412,  14426,  14427,  14431,  14442,  14449,  14457,  14464,  14480,  14490,  14507,  14519,  14539,  14553,  14572,  14573,  14576,  14585,  14589,  14599,  14603,  14616,  14619,  14625,  14634,  14637,  14658,  14659,  14662,  14665,  14668,  14675,  14682,  14699,  14705,  14708,  14709,  14715,  14722,  14726,  14732,  14754,  14763,  14773,  14782,  14791,  14800,  14811,  14838,  14839,  14844,  14856,  14872,  14875,  14884,  14900,  14903,  14916,  14938,  14940,  14947,  14949,  14984,  14985,  15001,  15004,  15007,  15016,  15028,  15037,  15040,  15066,  15069,  15070,  15073,  15079,  15086,  15089,  15096,  15106,  15109,  15130,  15144,  15147,  15170,  15204,  15216,  15220,  15223,  15236,  15237,  15242,  15246,  15252,  15255,  15265,  15268,  15269,  15288,  15294,  15297,  15309,  15319,  15329,  15332,  15335,  15336,  15339,  15340,  15343,  15346,  15358,  15364,  15375,  15384,  15405,  15407,  15414,  15428,  15431,  15432,  15436,  15439,  15445,  15457,  15469,  15483,  15489,  15492,  15497,  15504,  15522,  15531,  15540,  15551,  15560,  15562,  15587,  15599,  15608,  15617,  15621,  15631,  15660,  15667,  15691,  15698,  15705,  15706,  15742,  15748,  15761,  15782,  15786,  15792,  15796,  15803,  15806,  15810,  15815,  15819,  15846,  15853,  15860,  15861,  15868,  15886,  15919,  15935,  16005,  16009,  16018,  16028,  16037,  16040,  16050,  16051,  16084,  16085,  16094,  16099,  16115,  16126,  16132,  16142,  16145,  16148,  16151,  16160,  16163,  16166,  16190,  16199,  16208,  16211,  16214,  16238,  16241,  16244,  16247,  16251,  16257,  16262,  16282,  16296,  16300,  16314,  16315,  16318,  16321,  16322,  16324,  16333,  16337,  16356,  16357,  16366,  16371,  16377,  16384,  16390,  16418,  16427,  16430,  16440,  16444,  16447,  16459,  16465,  16468,  16473,  16474,  16477,  16483,  16495,  16498,  16502,  16506,  16509,  16512,  16519,  16530,  16542,  16547,  16555,  16572,  16575,  16587,  16593,  16622,  16638,  16641,  16654,  16659,  16671,  16680,  16685,  16689,  16698,  16711,  16726,  16738,  16743,  16755,  16773,  16790,  16801,  16804,  16810,  16817,  16822,  16836,  16839,  16849,  16871,  16895,  16901,  16905,  16909,  16929,  16948,  16951,  16958,  16961,  16962,  16965,  16972,  16982,  16995,  16998,  17001,  17012,  17020,  17027,  17033,  17034,  17050,  17063,  17070,  17092,  17095,  17096,  17102,  17106,  17111,  17121,  17129,  17132,  17137,  17159,  17160,  17163,  17171,  17186,  17213,  17220,  17231,  17241,  17255,  17264,  17285,  17307,  17308,  17311,  17350,  17353,  17375,  17384,  17386,  17400,  17420,  17438,  17446,  17454,  17463,  17477,  17486,  17500,  17506,  17523,  17531,  17538,  17555,  17567,  17568,  17580,  17608,  17614,  17621,  17652,  17669,  17673,  17684,  17699,  17708,  17709,  17720,  17726,  17748,  17749,  17755,  17762,  17766,  17772,  17776,  17779,  17785,  17789,  17809,  17826,  17834,  17843,  17844,  17854,  17884,  17894,  17897,  17898,  17909,  17913,  17920,  17923,  17938,  17941,  17962,  17963,  17969,  17986,  17990,  17997,  18019,  18038,  18039,  18049,  18050,  18057,  18087,  18090,  18101,  18108,  18112,  18119,  18136,  18146,  18152,  18155,  18161,  18162,  18165,  18171,  18180,  18188,  18202,  18205,  18212,  18215,  18222,  18231,  18245,  18252,  18256,  18266,  18269,  18282,  18300,  18310,  18311,  18318,  18321,  18330,  18342,  18345,  18352,  18371,  18400,  18422,  18428,  18429,  18449,  18458,  18465,  18472,  18478,  18485,  18495,  18521,  18526,  18534,  18541,  18550,  18563,  18572,  18579,  18590,  18602,  18609,  18641,  18651,  18654,  18667,  18682])


    def test_find_kmers_with_hamming_distance_3(self):
        indices = findIndexesForKmerWithHammingDistance(
            "AACAAGCTGATAAACATTTAAAGAG",
            "AAAAA",
            2)

        self.assertCountEqual(indices, [0, 1, 8, 9, 10, 11, 12, 17, 18, 19, 20])


    def test_find_kmers_with_hamming_distance_3(self):
        indices = findIndexesForKmerWithHammingDistance(
            "GAACTCAGTTGGCCCGAGATAGTTAATATACGAGTCCGGCACTTCGCGAGGGGGCGCTATTGCGACTGGAGATGCGCCTAATACTACGGTGGATTGGACAACGTGCGATGTCTCTTTCAATCGTTTGTGTGTACTGCACTAGAGTACCAGGGGCGTTCGGACCTTGTTTTCCTAGATTATGTAGCTTCCTCCTCTAGGGTTATTTGTCGTAACCTCGTGCAATCGCTCCGCCACTACCTATGGCCATTGGCCATAGCCTGCGGCTAGTACTGGATTAGGCCAGATTTCTTAGATAATAATGATAGGTTTCCGTAAATGCAGTCGCCGCCGAGGACTTAGTTTCTGTGCTTCAACTCTGAATTGAACATAAGAATCCC",
            "CTGTGCT",
            3)

        self.assertCountEqual(indices, [3, 13, 36, 41, 51, 71, 83, 86, 100, 102, 124, 126, 128, 133, 157, 161, 163, 166, 188, 193, 203, 214, 225, 237, 257, 264, 269, 287, 334, 342, 353, 355])


    def test_hd_kmers(self):
        max_set, kmers = frequentWordsWithMismatches(
            "ACGTTGCATGTCGCATGATGCATGAGAGCT",
            4,
            distance=1)

        self.assertCountEqual(max_set, ["GATG", "ATGC", "ATGT"])

    def test_hd_kmers_2(self):
        array = "CACAGTAGGCGCCGGCACACACAGCCCCGGGCCCCGGGCCGCCCCGGGCCGGCGGCCGCCGGCGCCGGCACACCGGCACAGCCGTACCGGCACAGTAGTACCGGCCGGCCGGCACACCGGCACACCGGGTACACACCGGGGCGCACACACAGGCGGGCGCCGGGCCCCGGGCCGTACCGGGCCGCCGGCGGCCCACAGGCGCCGGCACAGTACCGGCACACACAGTAGCCCACACACAGGCGGGCGGTAGCCGGCGCACACACACACAGTAGGCGCACAGCCGCCCACACACACCGGCCGGCCGGCACAGGCGGGCGGGCGCACACACACCGGCACAGTAGTAGGCGGCCGGCGCACAGCC"

        max_set, kmers = frequentWordsWithMismatches(
            array,
            10,
            distance=2)

        GCACACAGAC_count = kmers.get("GCACACAGAC")
        GCGCACACAC_count = kmers.get("GCGCACACAC")

        self.assertCountEqual(max_set, ["GCACACAGAC", "GCGCACACAC"])

    def test_hd_kmers_my_method(self):
        kmers = getDistancedKmers(
            "ACGTTGCATGTCGCATGATGCATGAGAGCT",
            4,
            max_distance=1)
        max_set =findMostIndices(kmers)
        self.assertCountEqual(max_set, ["GATG", "ATGC", "ATGT"])

    def test_hd_kmers_my_method(self):
        kmers = getDistancedKmers(
            "CACAGTAGGCGCCGGCACACACAGCCCCGGGCCCCGGGCCGCCCCGGGCCGGCGGCCGCCGGCGCCGGCACACCGGCACAGCCGTACCGGCACAGTAGTACCGGCCGGCCGGCACACCGGCACACCGGGTACACACCGGGGCGCACACACAGGCGGGCGCCGGGCCCCGGGCCGTACCGGGCCGCCGGCGGCCCACAGGCGCCGGCACAGTACCGGCACACACAGTAGCCCACACACAGGCGGGCGGTAGCCGGCGCACACACACACAGTAGGCGCACAGCCGCCCACACACACCGGCCGGCCGGCACAGGCGGGCGGGCGCACACACACCGGCACAGTAGTAGGCGGCCGGCGCACAGCC",
            10,
            max_distance=2)
        max_set =findMostIndices(kmers)
        self.assertCountEqual(max_set, ["GCACACACAC", "GCGCACACAC"])

if __name__ == '__main__':
    unittest.main()



